package {	public class HistoryObject { // this class is used in history operations. it also stores history.		public var data:ExtendedArray = new ExtendedArray(); // all the history is stored there		public var position:int = 0; // represents the position in history. shown in the top left corner		public function HistoryObject() {		}//================================================== c o n v e r t T o I n n e r F o  r m a t ========================================================================		public function convertToInnerFormat(array:Array, forCopying=false):ExtendedArray { // convert from data format used by Main class to the data format used by this class			var current:ExtendedArray = new ExtendedArray();			var obj;			var realArray = getPresentFinal();			for each (obj in array) {				if (obj is GeoPoint) {					current.push(makeNewPoint(obj));				}			}			var point1Found, point2Found, v, k;			for each (obj in array) {				if (obj is GeoLine) {					var line:GeoLine = new GeoLine();					line.id = obj.id;					line.point1 = obj.point1.id;					line.point2 = obj.point2.id;					line.hide = obj.hide;					if(forCopying) {						point1Found=false, point2Found = false;						for each(k in array) {							if(k is GeoPoint && k.id == line.point1) point1Found = true;							else if(k is GeoPoint && k.id == line.point2) point2Found = true;						}						trace(point1Found, point2Found);						if(!point1Found) {							for each(v in realArray) {								if(v is GeoPoint && v.id == line.point1) {									current.push(makeNewPoint(v));									break;								}							}						}						if(!point2Found) {							for each(v in realArray) {								if(v is GeoPoint && v.id == line.point2) {									current.push(makeNewPoint(v));									break;								}							}						}					}					current.push(line);				}				else if (obj is GeoCircle) {					var circle:GeoCircle = new GeoCircle();					circle.id = obj.id;					circle.radius = obj.radius;					circle.centerPoint = obj.centerPoint.id;					circle.hide = obj.hide;					if(forCopying)  {						point1Found = false;						for each(k in array) {							if(k is GeoPoint && k.id == circle.centerPoint) {								point1Found = true;								break;							}						}						if(!point1Found) {							for each(v in realArray) {								if(v is GeoPoint && v.id == circle.centerPoint) {									current.push(makeNewPoint(v));									break;								}							}						}					}					current.push(circle);				}			}			return current;						function makeNewPoint(obj) {				var point:GeoPoint = new GeoPoint();					with(point) {						id = obj.id;						x1 = obj.x1;						y1 = obj.y1;						hide = obj.hide;						for(var i:int=0; i<obj.adjLines.length; i++) {							if(array.indexOf(obj.adjLines[i]) != -1) adjLines.push(obj.adjLines[i].id); 						}						for(i=0; i<obj.dependantCircles.length; i++) {							if(array.indexOf(obj.dependantCircles[i]) != -1) dependantCircles.push(obj.dependantCircles[i].id);						}					}					return point;			}		}		//================================================== w r i t e ========================================================================		public function write(array:Array) { // takes the array used by Main class, translates it and writes to the data array			while(position <= (data.length-1)) {				data.pop();			}			data.push(convertToInnerFormat(array));			position++;		}//================================================== g e t P r e v i o u s ========================================================================		public function getPrevious():ExtendedArray { // returns the previous history state			if(position>1) {				position--;				return getData();			}			else {				position = 0;				return new ExtendedArray();			}		}		//================================================== g e tN e x t ========================================================================		public function getNext():ExtendedArray { //returns the next history state			if(position<data.length) {				position++;			}			return getData();		}				/*public function getPresentRaw():ExtendedArray {			if(data.length > 0 && data[position-1]!=null){				var d = data[position-1].getCopy(); 				//trace(d[0].x1);				return d;			}			return new ExtendedArray();		}*/		//================================================== g e t P r e s e n t F i n a l ========================================================================		public function getPresentFinal():ExtendedArray { //returns the current history state			if(data.length > 0 && data[position-1]!=null){				return getData();			}			return new ExtendedArray();		}		//================================================== g e t R a w ========================================================================		public function getRaw():Array { // tranlates the data from the HistoryObject language to the Shared Object language. and returns it.			if(data.length > 0 && data[position-1]!=null) {				var a = data[position-1];				var newA = new Array();				var temp, temp2;				for each(var obj in a) {					if(obj is GeoPoint) {						temp = new Array();						temp.push("GeoPoint");						temp.push(obj.id) ;						temp.push(String(obj.x1));						temp.push(String(obj.y1));						temp2 = new Array();						var obj2;						for each(obj2 in obj.adjLines) {								temp2.push(String(obj2));						}						temp.push(temp2);						temp.push("&");						temp2 = new Array();						for each(obj2 in obj.dependantCircles) {								temp2.push(String(obj2));						}						temp.push(temp2);						temp.push(String(obj.hide));					}					else if(obj is GeoLine) {						temp = new Array();						temp.push("GeoLine");						temp.push(obj.id);						temp.push(String(obj.point1));						temp.push(String(obj.point2));						temp.push(String(obj.hide));					}					else if(obj is GeoCircle) {						temp = new Array();						temp.push("GeoCircle");						temp.push(obj.id);						temp.push(String(obj.radius));						temp.push(String(obj.centerPoint));						temp.push(String(obj.hide));					}					newA.push(temp);				}				return newA;			}			return new Array();		}		//================================================== p u s h R a w ========================================================================		public function pushRaw(array:Array) { // tranlates the data from Shared Object language to HistoryObject language			var obj, obj2;			var newA:ExtendedArray = new ExtendedArray();			for each(obj in array) {				if(obj[0] == "GeoPoint") {					var point:GeoPoint = new GeoPoint();					point.id = obj[1];					point.x1 = obj[2];					point.y1 = obj[3];					for each(obj2 in obj[4]) {						point.adjLines.push(obj2);					}					for each(obj2 in obj[6]) {						point.dependantCircles.push(obj2);					}					point.hide = obj[7];					point.wasDragged = false;					newA.push(point);				}				else if (obj[0] == "GeoLine") {					var line:GeoLine = new GeoLine();					line.id = obj[1];					line.point1 = obj[2];					line.point2 = obj[3];					line.hide = obj[4];					newA.push(line);				}				else if (obj[0] == "GeoCircle") {					var circle:GeoCircle = new GeoCircle();					circle.id = obj[1];					circle.radius = obj[2];					circle.centerPoint = obj[3];					circle.hide = obj[4];					newA.push(circle);				}			}			data.push(newA);			position++;		}		//================================================== g e t D a t a ========================================================================		private function getData():ExtendedArray { // gets the current shapes translating them so that Main class can use it (opposite to write())			var obj, obj2, id;			var array = data[position-1].getCopy();			for each(obj in array) {				if(obj is GeoPoint) {					for(var i:int=0; i<obj.adjLines.length; i++) {						id = obj.adjLines[i];						for each(obj2 in array) {							if(obj2.id == id) {								obj.adjLines[i] = obj2;								break;							}						}					}					for(i=0; i<obj.dependantCircles.length; i++) {						id = obj.dependantCircles[i];						for each(obj2 in array) {							if(obj2.id == id) {								obj.dependantCircles[i] = obj2;								break;							}						}					}				}				else if (obj is GeoLine) {					id = obj.point1;					for each(obj2 in array) {						if(obj2.id == id) {							obj.point1 = obj2;							break;						}					}					id = obj.point2;					for each(obj2 in array) {						if(obj2.id == id) {							obj.point2 = obj2;							break;						}					}				}				else if (obj is GeoCircle) {					id = obj.centerPoint;					for each(obj2 in array) {						if(obj2.id == id) {							obj.centerPoint = obj2;							break;						}					}				}			}		return array;		}		//================================================== p u s h T e x t ========================================================================		public function pushText(str:String) { //takes the text from the script window and transates into the multidimensional array consisting of strings. used by the "load" button			var obj, obj2, i:int;			var raw = str.split(",");			var newRaw = new Array();			var tempA, newObj;			for(i = 0; i<raw.length; i++) {				if(raw[i] == "GeoPoint" || raw[i] =="GeoLine"|| raw[i] =="GeoCircle"){					tempA = new Array();					tempA.push(raw[i++]);					while(raw[i] != "GeoPoint" && raw[i] != "GeoLine" && raw[i] != "GeoCircle") {						tempA.push(raw[i++]);						if(i>raw.length) break;					}					i--;					newRaw.push(tempA);				}			}			var finalRaw = new Array();			for each(obj in newRaw) {				if(obj[0] == "GeoPoint") {					newObj = new Array();					newObj.push(String(obj[0]));					newObj.push(String(obj[1]));					newObj.push(String(obj[2]));					newObj.push(String(obj[3]));					var newInner = new Array();					for(i=4;;i++) {						if(obj[i] != '&') {							newInner.push(String(obj[i]));						} else break;					}					newObj.push(newInner);					newInner = new Array();					for(i=i+1;;i++) {						if(i<obj.length-1) {							newInner.push(String(obj[i]));						} else break;					}					newObj.push(newInner);					newObj.push(String(obj[i+1]));					finalRaw.push(newObj);				} 				else if(obj[0] == "GeoLine"){					newObj = new Array();					newObj.push(String(obj[0]));					newObj.push(String(obj[1]));					newObj.push(String(obj[2]));					newObj.push(String(obj[3]));					newObj.push(String(obj[4]));					finalRaw.push(newObj);				}				else if(obj[0] == "GeoCircle"){					newObj = new Array();					newObj.push(String(obj[0]));					newObj.push(String(obj[1]));					newObj.push(String(obj[2]));					newObj.push(String(obj[3]));					newObj.push(String(obj[4]));					finalRaw.push(newObj);				}							}			pushRaw(finalRaw);		}	}}